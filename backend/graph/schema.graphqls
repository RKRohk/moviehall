scalar Time

enum Role {
  ADMIN
  USER
}

type Room {
  id: ID!
  code: ID!
  media: Media!
  actions: [Action!]!
  members: [User!]!
  timestamp: Int!
  owner: User!
}

type Media {
  uri: String!
  title: String
}

type Action {
  id: ID!
  createdBy: User!
  createdAt: Time!
  payload: String!
  actionType: ActionType!
  actionTimeStamp: Int
}

enum ActionType {
  MESSAGE
  TYPING
  PAUSE
  PLAY
  SEEK
  UPDATE
}

type User {
  id: ID!
  name: String!
  photoUri: String!
}

type Query {
  media: [Media!]!
  room(code: ID!): Room
}

input MediaInput {
  uri: String!
}

type Mutation {
  createRoom(uri: MediaInput!): Room!
  sendMessage(roomCode: String!, message: String!): Action!
  pause(roomCode: String!): Boolean
  play(roomCode: String!): Boolean
  seek(roomCode: String!, timeStamp: Int!): Boolean
  update(roomCode: String!, timeStamp: Int!): Boolean
}

type Subscription {
  messages(roomCode: String!): Action!
  timeupdate(roomCode: String!): Int!
}
