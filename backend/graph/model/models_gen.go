// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
	"time"
)

type Action struct {
	CreatedBy  string     `json:"createdBy"`
	CreatedAt  time.Time  `json:"createdAt"`
	Payload    string     `json:"payload"`
	ActionType ActionType `json:"actionType"`
}

type Media struct {
	URI   string  `json:"uri"`
	Title *string `json:"title"`
}

type MediaInput struct {
	URI string `json:"uri"`
}

type MessageInput struct {
	CreatedBy string `json:"createdBy"`
	CreatedAt string `json:"createdAt"`
	Payload   string `json:"payload"`
}

type User struct {
	Name     string `json:"name"`
	PhotoURI string `json:"photoUri"`
}

type ActionType string

const (
	ActionTypeMessage ActionType = "MESSAGE"
	ActionTypeTyping  ActionType = "TYPING"
	ActionTypePause   ActionType = "PAUSE"
	ActionTypePlay    ActionType = "PLAY"
	ActionTypeSeek    ActionType = "SEEK"
	ActionTypeUpdate  ActionType = "UPDATE"
)

var AllActionType = []ActionType{
	ActionTypeMessage,
	ActionTypeTyping,
	ActionTypePause,
	ActionTypePlay,
	ActionTypeSeek,
	ActionTypeUpdate,
}

func (e ActionType) IsValid() bool {
	switch e {
	case ActionTypeMessage, ActionTypeTyping, ActionTypePause, ActionTypePlay, ActionTypeSeek, ActionTypeUpdate:
		return true
	}
	return false
}

func (e ActionType) String() string {
	return string(e)
}

func (e *ActionType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ActionType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ActionType", str)
	}
	return nil
}

func (e ActionType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Role string

const (
	RoleAdmin Role = "ADMIN"
	RoleUser  Role = "USER"
)

var AllRole = []Role{
	RoleAdmin,
	RoleUser,
}

func (e Role) IsValid() bool {
	switch e {
	case RoleAdmin, RoleUser:
		return true
	}
	return false
}

func (e Role) String() string {
	return string(e)
}

func (e *Role) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Role(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Role", str)
	}
	return nil
}

func (e Role) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
